(*
    MFDS TP6-7 : Tri par insertion
*)

module Tri

  use import int.Int
  use import ref.Ref
  use import array.Array
  use import array.IntArraySorted
  use import array.ArraySwap
  use import array.ArrayPermut
  use import array.ArrayEq
  
  let tri_insertion (a: array int) : unit
    ensures { sorted a /\ permut_all (old a) a }
    =
    'Init:
    for i = 0 to (a.length - 1) do
        invariant { permut_all (at a 'Init) a   }
        invariant { sorted_sub a 0 i  }
        let j = ref i in
        while !j > 0 && a[!j-1] > a[!j]  do
            invariant { 0 <= !j <= i }
            invariant { permut_all (at a 'Init) a   }
            (*Les éléments de 0 à j son triés*)
            invariant { sorted_sub a 0 !j }
            (*Les éléments de j à i+1 son triés*)
            invariant { sorted_sub a !j (i+1) }
            (*Tous les éléments de 0 à j sont plus petits que ceux de j+1 à i*)
            invariant { forall k1 k2:int. 0 <= k1 < !j /\ !j+1 <= k2 <= i ->
                      a[k1] <= a[k2] }
            variant { !j }
       swap a !j (!j-1);
       j := !j -1
     done
   done


 let test () =
    let a = make 3 0 in
    a[0] <- 7; a[1] <- 3; a[2] <- 1;
    tri_insertion a;
    a

  let test2 () ensures { result.length = 8 } =
    let a = make 8 0 in
    a[0] <- 53; a[1] <- 91; a[2] <- 17; a[3] <- -5;
    a[4] <- 413; a[5] <- 42; a[6] <- 69; a[7] <- 6;
    tri_insertion a;
    a

end
