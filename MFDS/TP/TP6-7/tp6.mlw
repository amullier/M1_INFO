(*
  TP6 - MFDS
*)

module Tri

  use import int.Int
  use import ref.Ref
  use import array.Array
  use import array.IntArraySorted
  use import array.ArraySwap
  use import array.ArrayPermut
  use import array.ArrayEq

(* La bibliotheque array.ArraySwap contient la fonction
  val swap (a: array int) (i: int) (j: int) =
  requires { 0 <= i < length a /\ 0 <= j < length a }
  ensures { exchange (old a) a i j }
  
  pour i de 1 à n - 1
          min <- i
          pour j de i + 1 à n
              si t[j] < t[min], alors min <- j
          fin pour
          si min <> i, alors échanger t[i] et t[min]
      fin pour
*)

  let tri_selection (a: array int) : unit
    ensures { sorted a /\ permut_all (old a) a }
    = 
    let n = ref (length a) in
    'Init:
    for i=0 to (!n - 2) do
        invariant{ sorted_sub a 0 (i-1)}
        invariant{ permut_all a (at a 'Init)}
        let min = ref i in
        for j=(i+1) to (!n - 1) do
        invariant { 0 <= !min < !n}
        invariant{ forall index. 0<= i <=index<j< (!n) -> a[!min]<=a[index] }
        invariant { forall i1. 0 <= i1 < i < (!n - 1) -> a[i1] < a[!min]}
            if a[j]<a[!min] then
                min := j
        done;
        if !min <> i then
            (swap a i !min)
        
    done

 let test () =
    let a = make 3 0 in
    a[0] <- 7; a[1] <- 3; a[2] <- 1;
    tri_selection a;
    a

  let test2 () ensures { result.length = 8 } =
    let a = make 8 0 in
    a[0] <- 53; a[1] <- 91; a[2] <- 17; a[3] <- -5;
    a[4] <- 413; a[5] <- 42; a[6] <- 69; a[7] <- 6;
    tri_selection a;
    a

end
